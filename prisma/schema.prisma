// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AssetType {
  MUSIC
  WATERMARK
  LOTTIE
}

enum UserRole {
  USER
  ADMIN
  AGENCY
  AGENCY_USER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
  INACTIVE
}

enum VideoGenerationStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model User {
  id                    String      @id // Clerk ID
  email                 String      @unique
  firstName            String?
  lastName             String?
  password             String
  role                UserRole    @default(USER)
  stripeCustomerId     String?     @unique
  stripeSubscriptionId String?
  stripePriceId        String?
  stripeProductId      String?
  subscriptionStatus   SubscriptionStatus    @default(INACTIVE)
  subscriptionPeriodEnd DateTime?
  currentTierId        String?     @db.Uuid
  lastLoginAt         DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  // Agency related fields
  agencyId           String?     // For agency_users
  agencyOwnerId      String?     // For agency users
  agencyName         String?     // For agency accounts
  agencyMaxUsers     Int?        // For agency accounts
  agencyCurrentUsers Int?        @default(0) // For agency accounts
  
  // Relations
  agency            User?       @relation("AgencyUsers", fields: [agencyId], references: [id])
  agencyUsers       User[]      @relation("AgencyUsers")
  subscriptionLogs    SubscriptionLog[]
  subscriptionHistory SubscriptionHistory[]
  creditLogs      CreditLog[]    @relation("UserCreditLogs")
  adminCreditLogs CreditLog[]    @relation("AdminCreditLogs")
  tierChanges     TierChange[]   @relation("UserTierChanges")
  adminTierChanges TierChange[]  @relation("AdminTierChanges")
  listingCredits  ListingCredit[]
  listings        Listing[]
  photos          Photo[]
  videoJobs       VideoJob[]
  videoGenerationJobs VideoGenerationJob[] @relation("UserVideoJobs")
  agencyVideoJobs    VideoGenerationJob[] @relation("AgencyUsers")
  searchHistory   SearchHistory[]
  errorLogs       ErrorLog[]
  tempUploads     TempUpload[]
  currentTier     SubscriptionTier? @relation(fields: [currentTierId], references: [id])
  bulkDiscount    BulkDiscount?   @relation(fields: [bulkDiscountId], references: [id])
  bulkDiscountId  String?        @db.Uuid

  @@index([currentTierId])
  @@index([agencyId])
  @@index([bulkDiscountId])
  @@map("users")
}

model SubscriptionTier {
  id              String   @id @default(uuid()) @db.Uuid
  name            String
  description     String
  stripePriceId   String   @unique
  stripeProductId String   @unique
  features        String[]
  monthlyPrice    Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  users          User[]
  templates      Template[] @relation("TemplateToSubscriptionTier")
  assets         Asset[]
  subscriptionHistory SubscriptionHistory[]

  @@map("subscription_tiers")
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String
  tiers       String[] // ["free", "pro", "enterprise"]
  order       Int      @default(0)
  thumbnailUrl String? @map("thumbnail_url")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscriptionTiers SubscriptionTier[] @relation("TemplateToSubscriptionTier")
}

model CreditLog {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id")
  amount    Int
  reason    String
  adminId   String?  @map("admin_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User     @relation("UserCreditLogs", fields: [userId], references: [id])
  admin     User?    @relation("AdminCreditLogs", fields: [adminId], references: [id])

  @@map("credit_logs")
}

model TierChange {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id")
  oldTier   String   @map("old_tier") @db.Uuid
  newTier   String   @map("new_tier") @db.Uuid
  reason    String
  adminId   String?  @map("admin_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User     @relation("UserTierChanges", fields: [userId], references: [id])
  admin     User?    @relation("AdminTierChanges", fields: [adminId], references: [id])

  @@map("tier_changes")
}

model Asset {
  id              String   @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  filePath        String   @map("file_path")
  type            AssetType
  subscriptionTier String  @map("subscription_tier") @db.Uuid
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  tier            SubscriptionTier @relation(fields: [subscriptionTier], references: [id])

  @@index([type, subscriptionTier])
  @@map("assets")
}

model ListingCredit {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @map("user_id")
  creditsRemaining Int      @map("credits_remaining")
  expiryDate       DateTime @map("expiry_date")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user             User     @relation(fields: [userId], references: [id])

  @@map("listing_credits")
}

model Listing {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id")
  address     String
  description String?
  coordinates Json?    @default("{}")
  status      String
  photoLimit  Int      @default(10) @map("photo_limit")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  photos      Photo[]
  videoJobs   VideoJob[]

  @@map("listings")
}

model Photo {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id")
  listingId   String   @map("listing_id") @db.Uuid
  filePath    String   @map("file_path")
  processedFilePath String? @map("processed_file_path")
  order       Int      @default(0)
  status      String   @default("pending") // pending, processing, completed, error
  error       String?
  runwayVideoPath String? @map("runway_video_path") // Store the individual video segment
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  listing     Listing  @relation(fields: [listingId], references: [id])

  @@map("photos")
}

model VideoJob {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id")
  listingId   String   @map("listing_id") @db.Uuid
  status      VideoGenerationStatus @default(QUEUED)
  progress    Float    @default(0) @map("progress")
  template    String?
  inputFiles  Json?    @map("input_files")
  outputFile  String?  @map("output_file")
  error       String?
  position    Int      @default(0)
  priority    Int      @default(1)
  startedAt   DateTime? @map("started_at")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  listing     Listing  @relation(fields: [listingId], references: [id])

  @@index([status, position])
  @@map("video_jobs")
}

model SearchHistory {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id")
  query     String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@map("search_history")
}

model ErrorLog {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @map("user_id")
  error     String
  stack     String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User?    @relation(fields: [userId], references: [id])

  @@map("error_logs")
}

model TempUpload {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id")
  address     String?
  files       Json     @default("[]")
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime @map("expires_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id])

  @@map("temp_uploads")
}

model SubscriptionLog {
  id                  String   @id @default(uuid()) @db.Uuid
  userId              String
  action              String
  stripeSubscriptionId String
  stripePriceId       String?
  stripeProductId     String?
  status              String
  periodEnd           DateTime?
  createdAt           DateTime @default(now())

  // Relations
  user                User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("subscription_logs")
}

model BulkDiscount {
  id              String   @id @default(uuid()) @db.Uuid
  name            String
  description     String
  discountPercent Float
  maxUsers        Int
  currentUsers    Int      @default(0)
  isActive        Boolean  @default(true)
  expiresAt       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  users           User[]

  @@map("bulk_discounts")
}



model SubscriptionHistory {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String
  status        SubscriptionStatus
  tierId        String   @db.Uuid
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id])
  tier          SubscriptionTier @relation(fields: [tierId], references: [id])

  @@map("subscription_history")
}

model ProcessedAsset {
  id        String   @id @default(cuid())
  type      String   // 'webp' | 'video' | 'map'
  path      String
  hash      String
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hash])
  @@index([type])
}


model VideoGenerationJob {
  id          String               @id @default(uuid())
  userId      String
  agencyId    String?
  inputFiles  Json                 // Array of file paths
  template    String
  status      VideoGenerationStatus @default(QUEUED)
  position    Int
  priority    Int                  @default(1)
  error       String?
  result      String?              // URL of the generated video
  createdAt   DateTime             @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  
  user        User                 @relation("UserVideoJobs", fields: [userId], references: [id], onDelete: Cascade)
  agency      User?                @relation("AgencyUsers", fields: [agencyId], references: [id], onDelete: SetNull)

  @@map("video_generation_jobs")
}
